{"mappings":"AAAA,EAAiC,AAAjC,+BAAiC;AACjC,EAA8C,AAA9C,4CAA8C;AAC9C,EAA+B,AAA/B,6BAA+B;AAC/B,EAA+E,AAA/E,6EAA+E;AAC/E,EAAoB,AAApB,kBAAoB;AACpB,EAAQ,AAAR,MAAQ;AACR,EAAK,AAAL,GAAK;AAEL,KAAK,CAAC,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAS;AAExD,KAAK,CAAC,UAAU,oBAAoB,CAAC;IAGnC,GAAG,CAAC,CAAC;QAEH,EAAoB,AAApB,kBAAoB;QACpB,KAAK,CAAC,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAA2E;QAEnG,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI;QAE3B,EAAiI,AAAjI,0MAA4M;QACjI,EAAa,AAAxF,yJAA2J;QACxF,EAAjE,GAAE,GAAG,CAAC,EAAE,EAAE,KAAK,CAAC,GAAG,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;QAE5D,EAAoB,AAApB,kBAAoB;QACpB,EAAE;QACF,OAAO,CAAC,GAAG,CAAC,IAAI;QAEhB,EAAS,AAAT,OAAS;QACT,EAA4C,AAA5C,8EAAgF;QAC5C,EAAwE,AAA5G,iMAAmM;QAC5G,GAApF,CAAC,CAAC,CAAA,MAAM,EAAA,CAAC,GAAG,IAAI,CAAC,IAAI;QAExB,EAAyF,AAAzF,wJAA0J;QACzF,MAA3D,GAAG,CAAC;YACR,EAAE,EAAE,MAAM,CAAC,EAAE;YACb,KAAK,EAAE,MAAM,CAAC,KAAK;YACnB,SAAS,EAAE,MAAM,CAAC,SAAS;YAC3B,SAAS,EAAE,MAAM,CAAC,UAAU;YAC5B,KAAK,EAAE,MAAM,CAAC,SAAS;YACvB,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,WAAW,EAAE,MAAM,CAAC,YAAY;YAChC,WAAW,EAAE,MAAM,CAAC,WAAW;QACjC,CAAC;QAED,OAAO,CAAC,GAAG,CAAC,MAAM;QAEpB,EAAuB,AAAvB,qBAAuB;QACvB,EAAU,AAAV,QAAU;QACR,KAAK,CAAC,MAAM,IAAI,6dAkBA,EAAE,MAAM,CAAC,KAAK,CAAC,6FAEjB,EAAE,MAAM,CAAC,KAAK,CAAC,0TASsC,EAAE,MAAM,CAAC,WAAW,CAAC,4TAOtB,EAAE,MAAM,CAAC,QAAQ,CAAC,6kCAkC5E,EAAE,MAAM,CAAC,WAAW,CAAC,GAAG,EAAC,GAAG,GAAI,CAAC;YAC/B,MAAM,EAAE,0NAKsB,EAAE,GAAG,CAAC,QAAQ,CAAC,kGAEhB,EAAE,GAAG,CAAC,IAAI,CAAC,wBACtC,EAAE,GAAG,CAAC,WAAW,CAAC,qEAIpB;QACD,CAAC,EAAE,IAAI,CAAC,CAAE,GAAE,uRASmB,EAAE,MAAM,CAAC,SAAS,CAAC,4JAK7C,EAAE,MAAM,CAAC,SAAS,CAAC,8OASjC;QAEA,EAAuD,AAAvD,8FAAgG;QACvD,eAA1B,CAAC,SAAS,GAAG,CAAE;QAE9B,EAAqB,AAArB,oCAAqB;QACrB,eAAe,CAAC,kBAAkB,CAAC,CAAY,aAAE,MAAM;IAIzD,CAAC,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC;QAEb,KAAK,CAAC,GAAG;IAEX,CAAC;AAEH,CAAC;AAGD,UAAU","sources":["src/js/controller.js"],"sourcesContent":["// const timeout = function (s) {\n//   return new Promise(function (_, reject) {\n//     setTimeout(function () {\n//       reject(new Error(`Request took too long! Timeout after ${s} second`));\n//     }, s * 1000);\n//   });\n// };\n\nconst recipeContainer = document.querySelector('.recipe')\n\nconst showRecipe = async function() {\n\n\n  try {\n\n    // 1) loading recipe\n    const res = await fetch('https://forkify-api.herokuapp.com/api/v2/recipes/5ed6604591c37cdc054bcc5b')\n\n    const data = await res.json()\n\n    // Step 7 - если неправильный id, то в свойстве объекта res в ok - будет false и в ошибку мы вставляем message из полученной даты\n    // эта ошибка попадает в блок catch, которая выдает алерт с прописанной тут нотификацией\n    if(!res.ok) throw new Error(`${data.message} (${res.status})`)\n\n    // console.log(res);\n    //\n    console.log(data);\n\n    // Step 8\n    // сохраняем из полученных данных сам рецепт\n    // так как это объект, то можно сразу деструктурировать полученный рецепт не просто в переменную, а в объект\n    let {recipe} = data.data\n\n    //так как recipe у нас переменная, то переназначим ее в объект c понятными нам свойствами\n    recipe = {\n      id: recipe.id,\n      title: recipe.title,\n      publisher: recipe.publisher,\n      sourceUrl: recipe.source_url,\n      image: recipe.image_url,\n      servings: recipe.servings,\n      cookingTime: recipe.cooking_time,\n      ingredients: recipe.ingredients\n    }\n\n    console.log(recipe);\n\n  //  2) rendering recipe\n  //  Step 1\n    const markup = `\n            <div class=\"spinner\">\n          <svg>\n            <use href=\"src/img/icons.svg#icon-loader\"></use>\n          </svg>\n        </div>\n\n        <div class=\"error\">\n            <div>\n              <svg>\n                <use href=\"src/img/icons.svg#icon-alert-triangle\"></use>\n              </svg>\n            </div>\n            <p>No recipes found for your query. Please try again!</p>\n          </div>\n\n       \n        <figure class=\"recipe__fig\">\n          <img src=\"${recipe.image}\" alt=\"Tomato\" class=\"recipe__img\" />\n          <h1 class=\"recipe__title\">\n            <span>${recipe.title}</span>\n          </h1>\n        </figure>\n\n        <div class=\"recipe__details\">\n          <div class=\"recipe__info\">\n            <svg class=\"recipe__info-icon\">\n              <use href=\"src/img/icons.svg#icon-clock\"></use>\n            </svg>\n            <span class=\"recipe__info-data recipe__info-data--minutes\">${recipe.cookingTime}</span>\n            <span class=\"recipe__info-text\">minutes</span>\n          </div>\n          <div class=\"recipe__info\">\n            <svg class=\"recipe__info-icon\">\n              <use href=\"src/img/icons.svg#icon-users\"></use>\n            </svg>\n            <span class=\"recipe__info-data recipe__info-data--people\">${recipe.servings}</span>\n            <span class=\"recipe__info-text\">servings</span>\n\n            <div class=\"recipe__info-buttons\">\n              <button class=\"btn--tiny btn--increase-servings\">\n                <svg>\n                  <use href=\"src/img/icons.svg#icon-minus-circle\"></use>\n                </svg>\n              </button>\n              <button class=\"btn--tiny btn--increase-servings\">\n                <svg>\n                  <use href=\"src/img/icons.svg#icon-plus-circle\"></use>\n                </svg>\n              </button>\n            </div>\n          </div>\n\n          <div class=\"recipe__user-generated\">\n            <svg>\n              <use href=\"src/img/icons.svg#icon-user\"></use>\n            </svg>\n          </div>\n          <button class=\"btn--round\">\n            <svg class=\"\">\n              <use href=\"src/img/icons.svg#icon-bookmark-fill\"></use>\n            </svg>\n          </button>\n        </div>\n\n        <div class=\"recipe__ingredients\">\n          <h2 class=\"heading--2\">Recipe ingredients</h2>\n          <ul class=\"recipe__ingredient-list\">\n          \n<!-- Step 2 -->\n            ${recipe.ingredients.map(ing => {\n              return `\n               <li class=\"recipe__ingredient\">\n              <svg class=\"recipe__icon\">\n                <use href=\"src/img/icons.svg#icon-check\"></use>\n              </svg>\n              <div class=\"recipe__quantity\">${ing.quantity}</div>\n              <div class=\"recipe__description\">\n                <span class=\"recipe__unit\">${ing.unit}</span>\n                ${ing.description}\n              </div>\n            </li>\n              \n              `\n             }).join('')}\n\n          </ul>\n        </div>\n\n        <div class=\"recipe__directions\">\n          <h2 class=\"heading--2\">How to cook it</h2>\n          <p class=\"recipe__directions-text\">\n            This recipe was carefully designed and tested by\n            <span class=\"recipe__publisher\">${recipe.publisher}</span>. Please check out\n            directions at their website.\n          </p>\n          <a\n            class=\"btn--small recipe__btn\"\n            href=\"${recipe.sourceUrl}\"\n            target=\"_blank\"\n          >\n            <span>Directions</span>\n            <svg class=\"search__icon\">\n              <use href=\"src/img/icons.svg#icon-arrow-right\"></use>\n            </svg>\n          </a>\n        </div>\n    `\n\n    // очищаем HTML перед тем как вставлять нашу компоненту\n    recipeContainer.innerHTML = ''\n\n    // вставляем разметку\n    recipeContainer.insertAdjacentHTML('afterbegin', markup)\n\n\n\n  } catch (err) {\n\n    alert(err)\n\n  }\n\n}\n\n\nshowRecipe()"],"names":[],"version":3,"file":"index.430fc437.js.map","sourceRoot":"/__parcel_source_root/"}